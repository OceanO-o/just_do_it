关于外键：
    没有外键依然可以进行表连接查询
    外键优势是在于，删除表时需要级联删除，避免数据对不上。但外键需要额外的存储空间
    案例：流水明细和流水单表，没有外键的话删除流水明细，流水单则有一条记录对不上。

数据库三大范式：
    1.每一列都不可再分
    2.在第一范式的基础上，每一列必须依赖于主键
    3.在第二范式的基础上，非主键的列不能再派生出另外的列
    在设计数据库或做表的拆分时，根据三大范式执行

数据库慢查询的分析
    使用 explain 查询分析语句，查看分析执行中是否用到索引等
    like 只会对 args% 通配符在查询字段后面的百分号这种格式使用索引
    or 只会对前后都有索引的字段，条件查询才会使用索引
    子查询建议使用连接查询

表太大了查询很慢优化
    数据类型优化，正对整型尽量使用小的整型类型数据，对于既可以使用文本，又可以使用整型尽量使用整型
    合理冗余字段，减少表的连表查询

mysql性能优化
    内存和cpu都是有限的资源，磁盘读写需要计算位置，发出指令这些都要消耗cpu资源
    先把数据存放内存，然后集中写入磁盘可以节省cpu资源和磁盘读取时间，但会存在系统故障会丢失数据的风险
    相反，每次写入磁盘，数据最安全，但频繁读写导致系统效率降低
    高并发时cpu飙升到99，如何排查解决
    调整系统参数：
        innodb_flush_log_at_trx_commit默认值时1，每次提交事务九八护具写入日志，并把日志写入磁盘
        这样做的好处是，数据安全性最佳，不足之处是每次提交都要进行磁盘写入操作，过于频繁的磁盘读写会导致
        cpu资源浪费系统效率变低。改成2之后每次提交事务都将数据写入日志，但日志间隔1秒写入磁盘
        innodb_buffer_pool_size 使用缓存来存储索引和数据，专用mysql服务器的话，设置大一些
        innodb_buffer_pool_instance 将缓存区分成几个部分，提高系统并行能力。处理完cpu降到22%
    优化思路：
        疏通拥堵，消除瓶颈，让等待时间更短
        开拓新通道，增加并行能力
    如何利用系统资源诊断问题
        Performance Schema No26如何充分利用系统资源

分库分表
    垂直分库，垂直分表
        把列拆开，常用的和不常用的拆开
        按业务类型把库分为db1 db2
    水平分库，水平分表
        把行拆开，分为历史已确认数据，用来查询
        拆开的行存储在多个数据库当中
    er图根据业务确认实体，根据实体建立关系

容灾备份
    设置主从模式，再设定数据库备份策略避免托管在云端的机器因停电等导致数据丢失
    每晚12点做一个自动备份，循环备份7天
